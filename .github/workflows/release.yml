name: Release

on:
  push:
    branches: [main]
    paths:
      - ".changeset/**"
  workflow_dispatch:

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      pages: write
      actions: write
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          registry-url: "https://registry.npmjs.org"

      - name: Build
        run: |
          # Build workspace packages first
          pnpm --filter @pcu/utils build
          pnpm --filter @pcu/core build
          # Then build all packages
          pnpm build

      - name: Check for changesets or version updates
        id: check-changes
        run: |
          # Check for changeset files (for new changesets)
          if [ -n "$(ls .changeset/*.md 2>/dev/null | head -1)" ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
            # Check if local version is newer than NPM published version
            LOCAL_VERSION=$(node -p "require('./apps/cli/package.json').version")
            NPM_VERSION=$(npm view pcu@latest version 2>/dev/null || echo "0.0.0")
            echo "Local version: $LOCAL_VERSION"
            echo "NPM version: $NPM_VERSION"
            
            if [ "$LOCAL_VERSION" != "$NPM_VERSION" ]; then
              echo "should-publish=true" >> $GITHUB_OUTPUT
              echo "Version mismatch detected - should publish"
            else
              echo "should-publish=false" >> $GITHUB_OUTPUT
              echo "Versions match - no publishing needed"
            fi
          fi

      - name: Create Release Pull Request
        if: steps.check-changes.outputs.has-changesets == 'true'
        id: changesets-pr
        uses: changesets/action@v1
        with:
          commit: "chore: release CLI package"
          title: "chore: release CLI package"
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish CLI packages
        if: steps.check-changes.outputs.should-publish == 'true'
        id: publish
        run: |
          echo "🚀 Publishing CLI packages..."
          pnpm release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: No changes to publish
        if: steps.check-changes.outputs.has-changesets == 'false' && steps.check-changes.outputs.should-publish == 'false'
        run: |
          echo "ℹ️ No changesets or version updates found"
          echo "📝 To publish a new version, create a changeset with: pnpm changeset"

      - name: Get published version
        if: steps.publish.conclusion == 'success'
        id: version
        run: |
          VERSION=$(node -p "require('./apps/cli/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Enhanced GitHub Release
        if: steps.publish.conclusion == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: pcu@${{ steps.version.outputs.version }}
          release_name: v${{ steps.version.outputs.version }}
          body: |
            ## Installation

            ```bash
            npm install -g pcu@${{ steps.version.outputs.version }}
            ```

            ## Usage

            ### Quick Commands

            ```bash
            # Check for updates
            pcu -c

            # Update interactively
            pcu -i

            # Update with dry run
            pcu -u -d

            # Get workspace info
            pcu -s
            ```

            ### All Commands & Shortcuts

            | Command | Shorthand | Description |
            |---------|-----------|-------------|
            | `pcu check` | `pcu -c` | Check for outdated catalog dependencies |
            | `pcu update` | `pcu -u` | Update catalog dependencies |
            | `pcu analyze` | `pcu -a` | Analyze impact of dependency updates |
            | `pcu workspace` | `pcu -s` | Show workspace information and validation |
            | `pcu help` | `pcu -h` | Display help information |

            ### Common Examples

            ```bash
            # Interactive update with backup
            pcu -i -b

            # Update only minor versions
            pcu -u --target minor

            # Check specific catalog
            pcu -c --catalog node18

            # Analyze before updating
            pcu -a default react

            # Validate workspace
            pcu -s --validate
            ```

            For complete documentation, visit: https://github.com/houko/pnpm-catalog-updates#readme
          draft: false
          prerelease: false

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Build Dependencies
        run: |
          # Build workspace dependencies first
          pnpm --filter @pcu/utils build
          pnpm --filter @pcu/core build

      - name: Configure Next.js for GitHub Pages
        run: |
          cd apps/docs
          # Create a temporary config for GitHub Pages deployment
          cat > next.config.temp.mjs << 'EOF'
          import nextMDX from '@next/mdx'
          import path from 'path'
          import createNextIntlPlugin from 'next-intl/plugin'

          import { recmaPlugins } from './src/mdx/recma.mjs'
          import { rehypePlugins } from './src/mdx/rehype.mjs'
          import { remarkPlugins } from './src/mdx/remark.mjs'
          import withSearch from './src/mdx/search.mjs'

          const withNextIntl = createNextIntlPlugin('./src/i18n.ts')

          const withMDX = nextMDX({
            options: {
              remarkPlugins,
              rehypePlugins,
              recmaPlugins,
            },
          })

          const isProd = process.env.NODE_ENV === 'production'
          const useCustomDomain = process.env.USE_CUSTOM_DOMAIN === 'true'

          /** @type {import('next').NextConfig} */
          const nextConfig = {
            output: 'export',
            trailingSlash: true,
            images: {
              unoptimized: true,
            },
            basePath: isProd && !useCustomDomain ? '/pnpm-catalog-updates' : '',
            assetPrefix: isProd && !useCustomDomain ? '/pnpm-catalog-updates/' : '',
            pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'mdx'],
            outputFileTracingIncludes: {
              '/**/*': ['./src/app/**/*.mdx'],
            },
          }

          export default withNextIntl(withSearch(withMDX(nextConfig)))
          EOF
          # Replace the config for build
          mv next.config.temp.mjs next.config.mjs

      - name: Build Documentation
        run: |
          cd apps/docs
          # Build documentation using pnpm with custom domain
          NODE_ENV=production USE_CUSTOM_DOMAIN=true pnpm build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./apps/docs/out

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
