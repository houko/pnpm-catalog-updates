name: Release

on:
  push:
    branches: [main]
    paths:
      - ".changeset/**"
      - "package.json"

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: |
          echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-store.outputs.path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: node scripts/publish.js
          commit: "chore: release package"
          title: "chore: release package"
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish alias package "pcu" pointing to the same code
      - name: Publish alias package pcu
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Backup original package.json
          cp package.json package.original.json

          # Resolve catalog dependencies and rename package
          node - <<'NODE'
          const fs = require('fs');
          const yaml = require('yaml');

          // Read workspace catalog
          const workspaceYaml = fs.readFileSync('pnpm-workspace.yaml', 'utf8');
          const workspace = yaml.parse(workspaceYaml);
          const catalog = workspace.catalog || {};

          // Read and modify package.json
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));

          // Rename package
          pkg.name = 'pcu';

          // Resolve catalog: dependencies
          const resolveDeps = (deps) => {
            if (!deps) return deps;
            const resolved = {};
            for (const [name, version] of Object.entries(deps)) {
              if (version === 'catalog:') {
                resolved[name] = catalog[name] || version;
              } else {
                resolved[name] = version;
              }
            }
            return resolved;
          };

          // Resolve all dependency types
          if (pkg.dependencies) {
            pkg.dependencies = resolveDeps(pkg.dependencies);
          }
          if (pkg.devDependencies) {
            pkg.devDependencies = resolveDeps(pkg.devDependencies);
          }
          if (pkg.peerDependencies) {
            pkg.peerDependencies = resolveDeps(pkg.peerDependencies);
          }

          // Write the modified package.json
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          NODE

          # Publish the alias package
          npm publish --access public

          # Restore original package.json
          mv package.original.json package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.changesets.outputs.published == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ fromJson(steps.changesets.outputs.publishedPackages)[0].version }}
          release_name: v${{ fromJson(steps.changesets.outputs.publishedPackages)[0].version }}
          body: |
            ## Changes

            ## Installation

            ```bash
            npm install -g pnpm-catalog-updates@${{ fromJson(steps.changesets.outputs.publishedPackages)[0].version }}
            # or
            npm install -g pcu@${{ fromJson(steps.changesets.outputs.publishedPackages)[0].version }}
            ```

            ## Usage

            ### Quick Commands

            ```bash
            # Check for updates
            pcu -c

            # Update interactively
            pcu -i

            # Update with dry run
            pcu -u -d

            # Get workspace info
            pcu -s
            ```

            ### All Commands & Shortcuts

            | Command | Shorthand | Description |
            |---------|-----------|-------------|
            | `pcu check` | `pcu -c` | Check for outdated catalog dependencies |
            | `pcu update` | `pcu -u` | Update catalog dependencies |
            | `pcu analyze` | `pcu -a` | Analyze impact of dependency updates |
            | `pcu workspace` | `pcu -s` | Show workspace information and validation |
            | `pcu help` | `pcu -h` | Display help information |

            ### Common Examples

            ```bash
            # Interactive update with backup
            pcu -i -b

            # Update only minor versions
            pcu -u --target minor

            # Check specific catalog
            pcu -c --catalog node18

            # Analyze before updating
            pcu -a default react

            # Validate workspace
            pcu -s --validate
            ```

            For complete documentation, visit: https://github.com/houko/pnpm-catalog-updates#readme
          draft: false
          prerelease: false
